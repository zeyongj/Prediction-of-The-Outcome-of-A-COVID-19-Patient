# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TFjgvZEgBy9_MRowwNM3tZVQ5Qgk1jGw

During our research before the coding，we are inspired by the following articles：
    https://blog.csdn.net/qq_35679701/article/details/107239487
    https://blog.csdn.net/weixin_44132035/article/details/102807785
    https://blog.csdn.net/swordtraveller/article/details/92786837
    https://blog.csdn.net/wlx19970505/article/details/80301193
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import warnings
import seaborn as sns
import datetime
warnings.filterwarnings("ignore")

data=pd.read_csv('../data/train_new.csv')

data['age']=data['age'].fillna(np.mean(data['age']))
data['sex']=data['sex'].fillna(999)
data['date_confirmation']=data['date_confirmation'].fillna(data.date_confirmation.mode()[0])
data['source']=data['source'].fillna(data.source.mode()[0])

del data['additional_information']

for col in data.columns:
    if data[col].dtype=='object':
        data[col]=data[col].fillna(data[col].mode()[0])
    else:
        data[col]=data[col].fillna(np.mean(data[col]))

data.isna().sum()

data.nunique()

for col in ['date_confirmation','Last_Update']:
    data[col+'month']=data[col].apply(lambda x:int(str(x).split()[0].split('/')[1]))
    data[col+'day']=data[col].apply(lambda x:int(str(x).split()[0].split('/')[2]))
    del data[col]
    
for col in ['sex','province','country','source','Combined_Key']:
    codes, uniques = pd.factorize(data[col])
    data[col]=codes
    
data['outcome']=data['outcome'].apply(lambda x:1 if x=='hospitalized' else 0)

"""2.split data"""

cols=[col for col in data.columns if col!='outcome']

y=data['outcome']
X=data[cols]

X.corr()

plt.hist(data['sex'])
plt.show()

plt.hist(y)
plt.show()

from sklearn.preprocessing import StandardScaler

sca=StandardScaler()
X=sca.fit_transform(X)

X_train, X_val, y_train, y_val = train_test_split( X, y, test_size=0.2, random_state=42)

"""3.build model"""

import lightgbm as lgb
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score

from sklearn.neural_network import MLPClassifier
import math
import pickle

def model_lgb_train(trainX,trainy,params):
    model=lgb.LGBMClassifier(**params)
    model.fit(trainX,trainy,early_stopping_rounds=30,eval_set=[(X_train, y_train),(X_val, y_val)],verbose=0)
    return model

def model_lgb_val(valX,model):
    pred=model.predict(valX)
    return pred

def model_svr_train(trainX,trainy,params):
    model=SVC(**params)
    model.fit(trainX,trainy)
    return model

def model_svr_val(valX,model):
    pred=model.predict(valX)
    return pred

def model_mlp_train(trainX,trainy,params):
    model=MLPClassifier(**params)
    model.fit(trainX,trainy)
    return model

def model_mlp_val(valX,model):
    pred=model.predict(valX)
    return pred

params_lgb={ 'boosting_type':'gbdt','objective':'binary',
            'learning_rate':0.1, 'n_estimators':500, 'max_depth':5,
            'metric':'binary_logloss', 'bagging_fraction':0.8, 'feature_fraction':0.8, 'reg_lambda':0.9,'verbose':1000,'silent':False
}

params_svr={
    'kernel' :'rbf','degree' : 3,'gamma' :'auto','tol' : 0.001
}

params_mlp={
    'hidden_layer_sizes':(100,50), 'activation':'relu','solver':'adam',
    'alpha':0.02,'max_iter':200
}

model_lgb=model_lgb_train(X_train, y_train,params_lgb)
output = open('../models/lgb_classifier.pkl', 'wb')
pickle.dump(model_lgb, output)
output.close()
model_lgb=pickle.load(open('../models/lgb_classifier.pkl', 'rb'))
pred_lgb_val=model_lgb_val(X_val,model_lgb)
pred_lgb_train=model_lgb_val(X_train,model_lgb)
print('the train acc of lgb is '+str(accuracy_score(pred_lgb_train,y_train)))
print('the train f1 of lgb is '+str(f1_score(pred_lgb_train,y_train)))
print('the val acc of lgb is '+str(accuracy_score(pred_lgb_val,y_val)))
print('the  val f1 of lgb is '+str(f1_score(pred_lgb_val,y_val)))

model_svr=model_svr_train(X_train, y_train,params_svr)
output = open('../models/svc_classifier.pkl', 'wb')
pickle.dump(model_svr, output)
output.close()
model_svr=pickle.load(open('../models/svc_classifier.pkl', 'rb'))
pred_svr_val=model_svr_val(X_val,model_svr)
pred_svr_train=model_svr_val(X_train,model_svr)
print('the train acc of svm is '+str(accuracy_score(pred_svr_train,y_train)))
print('the train f1 of svm is '+str(f1_score(pred_svr_train,y_train)))
print('the val acc of svm is '+str(accuracy_score(pred_svr_val,y_val)))
print('the  val f1 of svm is '+str(f1_score(pred_svr_val,y_val)))

model_mlp=model_mlp_train(X_train, y_train,params_mlp)
output = open('../models/mlp_classifier.pkl', 'wb')
pickle.dump(model_mlp, output)
output.close()
model_mlp=pickle.load(open('../models/mlp_classifier.pkl', 'rb'))
pred_mlp_val=model_mlp_val(X_val,model_mlp)
pred_mlp_train=model_mlp_val(X_train,model_mlp)
print('the train acc of mlp is '+str(accuracy_score(pred_mlp_train,y_train)))
print('the train f1 of mlp is '+str(f1_score(pred_mlp_train,y_train)))
print('the val acc of mlp is '+str(accuracy_score(pred_mlp_val,y_val)))
print('the  val f1 of mlp is '+str(f1_score(pred_mlp_val,y_val)))

fig = plt.figure(figsize=(8,6))

sns.barplot(['train_lgb','val_lgb','train_svm','val_svm','train_mlp','val_mlp']
            ,[accuracy_score(pred_lgb_train,y_train),accuracy_score(pred_lgb_val,y_val),
              accuracy_score(pred_svr_train,y_train),accuracy_score(pred_svr_val,y_val),
              accuracy_score(pred_mlp_train,y_train),accuracy_score(pred_mlp_val,y_val),
             ])

plt.title('the acc of three models')

plt.savefig('../plots/accuracy.png')

fig = plt.figure(figsize=(8,6))

sns.barplot(['train_lgb','val_lgb','train_svm','val_svm','train_mlp','val_mlp']
            ,[f1_score(pred_lgb_train,y_train),f1_score(pred_lgb_val,y_val),
              f1_score(pred_svr_train,y_train),f1_score(pred_svr_val,y_val),
              f1_score(pred_mlp_train,y_train),f1_score(pred_mlp_val,y_val),
             ])

plt.title('the f1_score of three models')

plt.savefig('../plots/f1_score.png')

params_lgb1={ 'boosting_type':'gbdt','objective':'binary',
            'learning_rate':0.3, 'n_estimators':500, 'max_depth':5,
            'metric':'binary_logloss', 'bagging_fraction':0.8, 'feature_fraction':0.8, 'reg_lambda':0.9,'verbose':0,
}

params_svr1={
    'kernel' :'linear','degree' : 5,'gamma' :'auto','tol' : 0.001
}

params_mlp1={
    'hidden_layer_sizes':(100,50), 'activation':'relu','solver':'adam',
    'alpha':0.1,'max_iter':400
}

model_lgb=model_lgb_train(X_train, y_train,params_lgb1)
pred_lgb_val=model_lgb_val(X_val,model_lgb)
pred_lgb_train=model_lgb_val(X_train,model_lgb)
print('the train acc of lgb1 is '+str(accuracy_score(pred_lgb_train,y_train)))
print('the train f1 of lgb1 is '+str(f1_score(pred_lgb_train,y_train)))
print('the val acc of lgb1 is '+str(accuracy_score(pred_lgb_val,y_val)))
print('the  val f1 of lgb1 is '+str(f1_score(pred_lgb_val,y_val)))

model_svr=model_svr_train(X_train, y_train,params_svr1)
pred_svr_val=model_svr_val(X_val,model_svr)
pred_svr_train=model_svr_val(X_train,model_svr)
print('the train acc of svm1 is '+str(accuracy_score(pred_svr_train,y_train)))
print('the train f1 of svm1 is '+str(f1_score(pred_svr_train,y_train)))
print('the val acc of svm1 is '+str(accuracy_score(pred_svr_val,y_val)))
print('the  val f1 of svm1 is '+str(f1_score(pred_svr_val,y_val)))

model_mlp=model_mlp_train(X_train, y_train,params_mlp1)
pred_mlp_val=model_mlp_val(X_val,model_mlp)
pred_mlp_train=model_mlp_val(X_train,model_mlp)
print('the train acc of mlp1 is '+str(accuracy_score(pred_mlp_train,y_train)))
print('the train f1 of mlp1 is '+str(f1_score(pred_mlp_train,y_train)))
print('the val acc of mlp1 is '+str(accuracy_score(pred_mlp_val,y_val)))
print('the  val f1 of mlp1 is '+str(f1_score(pred_mlp_val,y_val)))